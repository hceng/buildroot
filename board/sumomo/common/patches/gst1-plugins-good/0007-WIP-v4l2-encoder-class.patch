From 1f5915fea78beacb38eed89cb2af93174aa32447 Mon Sep 17 00:00:00 2001
From: ayaka <ayaka@soulik.info>
Date: Sat, 6 Sep 2014 08:47:41 +0800
Subject: [PATCH 07/12] [WIP] v4l2: encoder class

Make the encoder in v4l2 class. Echo format is in its own
class.

Signed-off-by: ayaka <ayaka@soulik.info>
---
 sys/v4l2/Makefile.am       |   2 +
 sys/v4l2/gstv4l2.c         |   7 +-
 sys/v4l2/gstv4l2.h         |  11 +++
 sys/v4l2/gstv4l2h264enc.c  | 234 +++++++++++++++++++++++++++++++++++++++++++++
 sys/v4l2/gstv4l2h264enc.h  |  63 ++++++++++++
 sys/v4l2/gstv4l2videoenc.c | 111 +--------------------
 sys/v4l2/gstv4l2videoenc.h |   5 +-
 7 files changed, 323 insertions(+), 110 deletions(-)
 create mode 100644 sys/v4l2/gstv4l2.h
 create mode 100644 sys/v4l2/gstv4l2h264enc.c
 create mode 100644 sys/v4l2/gstv4l2h264enc.h

diff --git a/sys/v4l2/Makefile.am b/sys/v4l2/Makefile.am
index 4fb61b4..6981e2d 100644
--- a/sys/v4l2/Makefile.am
+++ b/sys/v4l2/Makefile.am
@@ -15,6 +15,7 @@ libgstvideo4linux2_la_SOURCES = gstv4l2.c \
 				gstv4l2transform.c \
 				gstv4l2videodec.c \
 				gstv4l2videoenc.c \
+				gstv4l2h264enc.c \
 				gstv4l2vidorient.c \
 				v4l2_calls.c \
 				v4l2-utils.c \
@@ -57,6 +58,7 @@ noinst_HEADERS = \
 	gstv4l2transform.h \
 	gstv4l2videodec.h \
 	gstv4l2videoenc.h \
+	gstv4l2h264enc.h \
 	gstv4l2vidorient.h \
 	v4l2_calls.h \
 	v4l2-utils.h \
diff --git a/sys/v4l2/gstv4l2.c b/sys/v4l2/gstv4l2.c
index e3ec005..4c30287 100644
--- a/sys/v4l2/gstv4l2.c
+++ b/sys/v4l2/gstv4l2.c
@@ -38,12 +38,13 @@
 #include "ext/videodev2.h"
 #include "v4l2-utils.h"
 
+#include "gstv4l2.h"
 #include "gstv4l2object.h"
 #include "gstv4l2src.h"
 #include "gstv4l2sink.h"
 #include "gstv4l2radio.h"
 #include "gstv4l2videodec.h"
-#include "gstv4l2videoenc.h"
+#include "gstv4l2h264enc.h"
 #include "gstv4l2deviceprovider.h"
 #include "gstv4l2transform.h"
 
@@ -171,8 +172,8 @@ gst_v4l2_probe_and_register (GstPlugin * plugin)
     else if (gst_v4l2_is_transform (sink_caps, src_caps))
       ret = gst_v4l2_transform_register (plugin, basename, it->device_path,
           sink_caps, src_caps);
-    else if (gst_v4l2_is_video_enc (sink_caps, src_caps))
-      ret = gst_v4l2_video_enc_register (plugin, basename, it->device_path,
+    else if (gst_v4l2_is_h264_enc (sink_caps, src_caps))
+      ret = gst_v4l2_h264_enc_register (plugin, basename, it->device_path,
           sink_caps, src_caps);
     /* else if ( ... etc. */
 
diff --git a/sys/v4l2/gstv4l2.h b/sys/v4l2/gstv4l2.h
new file mode 100644
index 0000000..8f6a8d8
--- /dev/null
+++ b/sys/v4l2/gstv4l2.h
@@ -0,0 +1,11 @@
+#ifndef GST_V4L2_H
+#define GST_V4L2_H
+
+typedef struct
+{
+  gchar *device;
+  GstCaps *sink_caps;
+  GstCaps *src_caps;
+} GstV4l2VideoCData;
+
+#endif
diff --git a/sys/v4l2/gstv4l2h264enc.c b/sys/v4l2/gstv4l2h264enc.c
new file mode 100644
index 0000000..9172146
--- /dev/null
+++ b/sys/v4l2/gstv4l2h264enc.c
@@ -0,0 +1,234 @@
+/*
+ * Copyright (C) 2014 SUMOMO Computer Association
+ *     Author: ayaka <ayaka@soulik.info>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Library General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Library General Public License for more details.
+ *
+ * You should have received a copy of the GNU Library General Public
+ * License along with this library; if not, write to the
+ * Free Software Foundation, Inc., 51 Franklin St, Fifth Floor,
+ * Boston, MA 02110-1301, USA.
+ *
+ */
+
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif
+
+#include <sys/stat.h>
+#include <fcntl.h>
+#include <errno.h>
+#include <unistd.h>
+#include <string.h>
+
+#include "gstv4l2h264enc.h"
+#include "v4l2_calls.h"
+
+#include <string.h>
+#include <gst/gst-i18n-plugin.h>
+
+GST_DEBUG_CATEGORY_STATIC (gst_v4l2_h264_enc_debug);
+#define GST_CAT_DEFAULT gst_v4l2_h264_enc_debug
+
+enum
+{
+  PROP_0,
+  V4L2_STD_OBJECT_PROPS,
+};
+
+#define gst_v4l2_h264_enc_parent_class parent_class
+G_DEFINE_ABSTRACT_TYPE (GstV4l2H264Enc, gst_v4l2_h264_enc,
+    GST_TYPE_V4L2_VIDEO_ENC);
+
+static void
+gst_v4l2_h264_enc_set_property (GObject * object,
+    guint prop_id, const GValue * value, GParamSpec * pspec)
+{
+  GstV4l2H264Enc *self = GST_V4L2_H264_ENC (object);
+
+  switch (prop_id) {
+      /* By default, only set on output */
+    default:
+      break;
+  }
+}
+
+static void
+gst_v4l2_h264_enc_get_property (GObject * object,
+    guint prop_id, GValue * value, GParamSpec * pspec)
+{
+  GstV4l2H264Enc *self = GST_V4L2_H264_ENC (object);
+
+  switch (prop_id) {
+      /* By default read from output */
+    default:
+      break;
+  }
+}
+
+static GstFlowReturn
+gst_v4l2_h264_enc_handle_frame (GstVideoEncoder * encoder,
+    GstVideoCodecFrame * frame)
+{
+  GstV4l2H264Enc *self = GST_V4L2_H264_ENC (encoder);
+  GstV4l2VideoEnc *parent = GST_V4L2_VIDEO_ENC (encoder);
+  GstFlowReturn ret = GST_FLOW_OK;
+  GstStructure *structure;
+  GstCaps *outcaps;
+
+  if (G_UNLIKELY (!GST_V4L2_IS_ACTIVE (parent->v4l2capture))) {
+    outcaps = gst_caps_new_empty_simple ("video/x-h264");
+    structure = gst_caps_get_structure (outcaps, 0);
+    gst_structure_set (structure, "stream-format",
+        G_TYPE_STRING, "byte-stream", NULL);
+    gst_structure_set (structure, "alignment", G_TYPE_STRING, "au", NULL);
+    return GST_V4L2_VIDEO_ENC_CLASS (parent_class)->handle_frame
+        (encoder, frame, outcaps);
+  }
+
+  return GST_V4L2_VIDEO_ENC_CLASS (parent_class)->handle_frame
+      (encoder, frame, NULL);
+}
+
+static void
+gst_v4l2_h264_enc_init (GstV4l2H264Enc * self)
+{
+
+}
+
+static void
+gst_v4l2_h264_enc_subinstance_init (GTypeInstance * instance, gpointer g_class)
+{
+  GstV4l2H264EncClass *klass = GST_V4L2_H264_ENC_CLASS (g_class);
+  GstV4l2H264Enc *self = GST_V4L2_H264_ENC (instance);
+  GstV4l2VideoEnc *parent = GST_V4L2_VIDEO_ENC (instance);
+
+  parent->v4l2output =
+      gst_v4l2_object_new (GST_ELEMENT (self),
+      V4L2_BUF_TYPE_VIDEO_OUTPUT,
+      GST_V4L2_VIDEO_ENC_CLASS (g_class)->default_device, gst_v4l2_get_output,
+      gst_v4l2_set_output, NULL);
+  parent->v4l2output->no_initial_format = TRUE;
+  parent->v4l2output->keep_aspect = FALSE;
+
+  parent->v4l2capture =
+      gst_v4l2_object_new (GST_ELEMENT (self),
+      V4L2_BUF_TYPE_VIDEO_CAPTURE,
+      GST_V4L2_VIDEO_ENC_CLASS (g_class)->default_device, gst_v4l2_get_input,
+      gst_v4l2_set_input, NULL);
+  parent->v4l2capture->no_initial_format = TRUE;
+  parent->v4l2capture->keep_aspect = FALSE;
+}
+
+
+static void
+gst_v4l2_h264_enc_class_init (GstV4l2H264EncClass * klass)
+{
+  GstElementClass *element_class;
+  GObjectClass *gobject_class;
+  GstV4l2VideoEncClass *v4l2_encoder_class;
+  GstVideoEncoderClass *baseclass;
+
+  parent_class = g_type_class_peek_parent (klass);
+
+  element_class = (GstElementClass *) klass;
+  gobject_class = (GObjectClass *) klass;
+  v4l2_encoder_class = GST_V4L2_VIDEO_ENC_CLASS (klass);
+  baseclass = GST_VIDEO_ENCODER_CLASS (klass);
+
+  GST_DEBUG_CATEGORY_INIT (gst_v4l2_h264_enc_debug, "v4l2h264enc", 0,
+      "V4L2 H.264 Encoder");
+
+  gst_element_class_set_static_metadata (element_class,
+      "V4L2 H.264 Encoder",
+      "Codec/Encoder/Video",
+      "Encode H.264 video streams via V4L2 API", "ayaka <ayaka@soulik.info>");
+
+  gobject_class->set_property =
+      GST_DEBUG_FUNCPTR (gst_v4l2_h264_enc_set_property);
+  gobject_class->get_property =
+      GST_DEBUG_FUNCPTR (gst_v4l2_h264_enc_get_property);
+  /* FIXME propose_allocation or not ? */
+  baseclass->handle_frame = GST_DEBUG_FUNCPTR (gst_v4l2_h264_enc_handle_frame);
+
+  gst_v4l2_object_install_m2m_properties_helper (gobject_class);
+
+}
+
+static void
+gst_v4l2_h264_enc_subclass_init (gpointer g_class, gpointer data)
+{
+  GstV4l2H264EncClass *klass = GST_V4L2_H264_ENC_CLASS (g_class);
+  GstElementClass *element_class = GST_ELEMENT_CLASS (g_class);
+  GstV4l2VideoCData *cdata = data;
+
+  GST_V4L2_VIDEO_ENC_CLASS (g_class)->default_device = cdata->device;
+
+  /* Note: gst_pad_template_new() take the floating ref from the caps */
+  gst_element_class_add_pad_template (element_class,
+      gst_pad_template_new ("sink",
+          GST_PAD_SINK, GST_PAD_ALWAYS, cdata->sink_caps));
+  gst_element_class_add_pad_template (element_class,
+      gst_pad_template_new ("src",
+          GST_PAD_SRC, GST_PAD_ALWAYS, cdata->src_caps));
+
+  g_free (cdata);
+}
+
+
+
+/* Probing functions */
+gboolean
+gst_v4l2_is_h264_enc (GstCaps * sink_caps, GstCaps * src_caps)
+{
+  gboolean ret = FALSE;
+
+  if (gst_caps_is_subset (sink_caps, gst_v4l2_object_get_raw_caps ())
+      && gst_caps_can_intersect (src_caps,
+          gst_caps_from_string ("video/x-h264")))
+    ret = TRUE;
+
+  return ret;
+}
+
+gboolean
+gst_v4l2_h264_enc_register (GstPlugin * plugin, const gchar * basename,
+    const gchar * device_path, GstCaps * sink_caps, GstCaps * src_caps)
+{
+  GTypeQuery type_query;
+  GTypeInfo type_info = { 0, };
+  GType type, subtype;
+  gchar *type_name;
+  GstV4l2VideoCData *cdata;
+
+  cdata = g_new0 (GstV4l2VideoCData, 1);
+  cdata->device = g_strdup (device_path);
+  cdata->sink_caps = gst_caps_ref (sink_caps);
+  cdata->src_caps = gst_caps_ref (src_caps);
+
+  type = gst_v4l2_h264_enc_get_type ();
+  g_type_query (type, &type_query);
+  memset (&type_info, 0, sizeof (type_info));
+  type_info.class_size = type_query.class_size;
+  type_info.instance_size = type_query.instance_size;
+  type_info.class_init = gst_v4l2_h264_enc_subclass_init;
+  type_info.class_data = cdata;
+  type_info.instance_init = gst_v4l2_h264_enc_subinstance_init;
+
+  type_name = g_strdup_printf ("v4l2%sh264enc", basename);
+  subtype = g_type_register_static (type, type_name, &type_info, 0);
+
+  gst_element_register (plugin, type_name, GST_RANK_PRIMARY + 1, subtype);
+
+  g_free (type_name);
+
+  return TRUE;
+}
diff --git a/sys/v4l2/gstv4l2h264enc.h b/sys/v4l2/gstv4l2h264enc.h
new file mode 100644
index 0000000..f0f6cbb
--- /dev/null
+++ b/sys/v4l2/gstv4l2h264enc.h
@@ -0,0 +1,63 @@
+/*
+ * Copyright (C) 2014 SUMOMO Computer Association.
+ *     Author: ayaka <ayaka@soulik.info>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Library General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Library General Public License for more details.
+ *
+ * You should have received a copy of the GNU Library General Public
+ * License along with this library; if not, write to the
+ * Free Software Foundation, Inc., 51 Franklin St, Fifth Floor,
+ * Boston, MA 02110-1301, USA.
+ *
+ */
+
+#ifndef __GST_V4L2_H264_ENC_H__
+#define __GST_V4L2_H264_ENC_H__
+
+#include <gst/gst.h>
+#include "gstv4l2videoenc.h"
+
+GST_DEBUG_CATEGORY_EXTERN (v4l2h264enc_debug);
+
+G_BEGIN_DECLS
+#define GST_TYPE_V4L2_H264_ENC \
+  (gst_v4l2_h264_enc_get_type())
+#define GST_V4L2_H264_ENC(obj) \
+  (G_TYPE_CHECK_INSTANCE_CAST((obj),GST_TYPE_V4L2_H264_ENC,GstV4l2H264Enc))
+#define GST_V4L2_H264_ENC_CLASS(klass) \
+  (G_TYPE_CHECK_CLASS_CAST((klass),GST_TYPE_V4L2_H264_ENC,GstV4l2H264EncClass))
+#define GST_IS_V4L2_H264_ENC(obj) \
+  (G_TYPE_CHECK_INSTANCE_TYPE((obj),GST_TYPE_V4L2_H264_ENC))
+#define GST_IS_V4L2_H264_ENC_CLASS(obj) \
+  (G_TYPE_CHECK_CLASS_TYPE((klass),GST_TYPE_V4L2_H264_ENC))
+typedef struct _GstV4l2H264Enc GstV4l2H264Enc;
+typedef struct _GstV4l2H264EncClass GstV4l2H264EncClass;
+
+struct _GstV4l2H264Enc
+{
+  GstV4l2VideoEnc parent;
+};
+
+struct _GstV4l2H264EncClass
+{
+  GstV4l2VideoEncClass parent_class;
+};
+
+GType gst_v4l2_h264_enc_get_type (void);
+
+gboolean gst_v4l2_is_h264_enc (GstCaps * sink_caps, GstCaps * src_caps);
+
+gboolean gst_v4l2_h264_enc_register (GstPlugin * plugin,
+    const gchar * basename,
+    const gchar * device_path, GstCaps * sink_caps, GstCaps * src_caps);
+
+G_END_DECLS
+#endif /* __GST_V4L2_H264_ENC_H__ */
diff --git a/sys/v4l2/gstv4l2videoenc.c b/sys/v4l2/gstv4l2videoenc.c
index 24c3d86..0478289 100644
--- a/sys/v4l2/gstv4l2videoenc.c
+++ b/sys/v4l2/gstv4l2videoenc.c
@@ -1,6 +1,6 @@
 /*
  * Copyright (C) 2014 SUMOMO Computer Association
- *     Author: ayaka <ayaka@mail.soulik.info>
+ *     Author: ayaka <ayaka@soulik.info>
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Library General Public
@@ -42,13 +42,6 @@ GST_DEBUG_CATEGORY_STATIC (gst_v4l2_video_enc_debug);
 
 static gboolean gst_v4l2_video_enc_flush (GstVideoEncoder * encoder);
 
-typedef struct
-{
-  gchar *device;
-  GstCaps *sink_caps;
-  GstCaps *src_caps;
-} GstV4l2VideoEncCData;
-
 enum
 {
   PROP_0,
@@ -242,10 +235,8 @@ gst_v4l2_video_enc_set_format (GstVideoEncoder * encoder,
 {
   gboolean ret = TRUE;
   GstV4l2VideoEnc *self = GST_V4L2_VIDEO_ENC (encoder);
-  GstCaps *outcaps;
   GstStructure *structure;
 
-
   GST_DEBUG_OBJECT (self, "Setting format: %" GST_PTR_FORMAT, state->caps);
 
   if (self->input_state) {
@@ -264,17 +255,8 @@ gst_v4l2_video_enc_set_format (GstVideoEncoder * encoder,
   if (ret)
     self->input_state = gst_video_codec_state_ref (state);
 
-  outcaps = gst_caps_new_empty_simple ("video/x-h264");
-  structure = gst_caps_get_structure (outcaps, 0);
-  gst_structure_set (structure, "stream-format",
-      G_TYPE_STRING, "byte-stream", NULL);
-  gst_structure_set (structure, "alignment", G_TYPE_STRING, "au", NULL);
-
-
   GST_DEBUG_OBJECT (self, "output caps: %" GST_PTR_FORMAT, state->caps);
 
-
-
 done:
   return ret;
 }
@@ -453,11 +435,10 @@ gst_v4l2_video_enc_loop_stopped (GstV4l2VideoEnc * self)
 
 static GstFlowReturn
 gst_v4l2_video_enc_handle_frame (GstVideoEncoder * encoder,
-    GstVideoCodecFrame * frame)
+    GstVideoCodecFrame * frame, GstCaps * outcaps)
 {
   GstV4l2VideoEnc *self = GST_V4L2_VIDEO_ENC (encoder);
   GstFlowReturn ret = GST_FLOW_OK;
-  GstCaps *outcaps;
   GstStructure *structure;
 
   GST_DEBUG_OBJECT (self, "Handling frame %d", frame->system_frame_number);
@@ -472,14 +453,8 @@ gst_v4l2_video_enc_handle_frame (GstVideoEncoder * encoder,
       goto not_negotiated;
   }
 
-  if (G_UNLIKELY (!GST_V4L2_IS_ACTIVE (self->v4l2capture))) {
+  if (NULL != outcaps) {
     GstBufferPool *pool = GST_BUFFER_POOL (self->v4l2output->pool);
-
-    outcaps = gst_caps_new_empty_simple ("video/x-h264");
-    structure = gst_caps_get_structure (outcaps, 0);
-    gst_structure_set (structure, "stream-format",
-        G_TYPE_STRING, "byte-stream", NULL);
-    gst_structure_set (structure, "alignment", G_TYPE_STRING, "au", NULL);
     gst_v4l2_object_set_format (self->v4l2capture, outcaps);
 
     if (!gst_buffer_pool_is_active (pool)) {
@@ -767,27 +742,6 @@ gst_v4l2_video_enc_init (GstV4l2VideoEnc * self)
 }
 
 static void
-gst_v4l2_video_enc_subinstance_init (GTypeInstance * instance, gpointer g_class)
-{
-  GstV4l2VideoEncClass *klass = GST_V4L2_VIDEO_ENC_CLASS (g_class);
-  GstV4l2VideoEnc *self = GST_V4L2_VIDEO_ENC (instance);
-
-  self->v4l2output =
-      gst_v4l2_object_new (GST_ELEMENT (self),
-      V4L2_BUF_TYPE_VIDEO_OUTPUT,
-      klass->default_device, gst_v4l2_get_output, gst_v4l2_set_output, NULL);
-  self->v4l2output->no_initial_format = TRUE;
-  self->v4l2output->keep_aspect = FALSE;
-
-  self->v4l2capture =
-      gst_v4l2_object_new (GST_ELEMENT (self),
-      V4L2_BUF_TYPE_VIDEO_CAPTURE,
-      klass->default_device, gst_v4l2_get_input, gst_v4l2_set_input, NULL);
-  self->v4l2capture->no_initial_format = TRUE;
-  self->v4l2capture->keep_aspect = FALSE;
-}
-
-static void
 gst_v4l2_video_enc_class_init (GstV4l2VideoEncClass * klass)
 {
   GstElementClass *element_class;
@@ -827,15 +781,14 @@ gst_v4l2_video_enc_class_init (GstV4l2VideoEncClass * klass)
       GST_DEBUG_FUNCPTR (gst_v4l2_video_enc_negotiate);
   video_encoder_class->decide_allocation =
       GST_DEBUG_FUNCPTR (gst_v4l2_video_enc_decide_allocation);
-  /* FIXME propose_allocation or not ? */
-  video_encoder_class->handle_frame =
-      GST_DEBUG_FUNCPTR (gst_v4l2_video_enc_handle_frame);
   video_encoder_class->sink_query =
       GST_DEBUG_FUNCPTR (gst_v4l2_video_enc_sink_query);
   video_encoder_class->src_query =
       GST_DEBUG_FUNCPTR (gst_v4l2_video_enc_src_query);
   video_encoder_class->sink_event =
       GST_DEBUG_FUNCPTR (gst_v4l2_video_enc_sink_event);
+  /* FIXME propose_allocation or not ? */
+  klass->handle_frame = GST_DEBUG_FUNCPTR (gst_v4l2_video_enc_handle_frame);
 
   element_class->change_state =
       GST_DEBUG_FUNCPTR (gst_v4l2_video_enc_change_state);
@@ -843,26 +796,6 @@ gst_v4l2_video_enc_class_init (GstV4l2VideoEncClass * klass)
   gst_v4l2_object_install_m2m_properties_helper (gobject_class);
 }
 
-static void
-gst_v4l2_video_enc_subclass_init (gpointer g_class, gpointer data)
-{
-  GstV4l2VideoEncClass *klass = GST_V4L2_VIDEO_ENC_CLASS (g_class);
-  GstElementClass *element_class = GST_ELEMENT_CLASS (g_class);
-  GstV4l2VideoEncCData *cdata = data;
-
-  klass->default_device = cdata->device;
-
-  /* Note: gst_pad_template_new() take the floating ref from the caps */
-  gst_element_class_add_pad_template (element_class,
-      gst_pad_template_new ("sink",
-          GST_PAD_SINK, GST_PAD_ALWAYS, cdata->sink_caps));
-  gst_element_class_add_pad_template (element_class,
-      gst_pad_template_new ("src",
-          GST_PAD_SRC, GST_PAD_ALWAYS, cdata->src_caps));
-
-  g_free (cdata);
-}
-
 /* Probing functions */
 gboolean
 gst_v4l2_is_video_enc (GstCaps * sink_caps, GstCaps * src_caps)
@@ -875,37 +808,3 @@ gst_v4l2_is_video_enc (GstCaps * sink_caps, GstCaps * src_caps)
 
   return ret;
 }
-
-gboolean
-gst_v4l2_video_enc_register (GstPlugin * plugin, const gchar * basename,
-    const gchar * device_path, GstCaps * sink_caps, GstCaps * src_caps)
-{
-  GTypeQuery type_query;
-  GTypeInfo type_info = { 0, };
-  GType type, subtype;
-  gchar *type_name;
-  GstV4l2VideoEncCData *cdata;
-
-  cdata = g_new0 (GstV4l2VideoEncCData, 1);
-  cdata->device = g_strdup (device_path);
-  cdata->sink_caps = gst_caps_ref (sink_caps);
-  cdata->src_caps = gst_caps_ref (src_caps);
-
-  type = gst_v4l2_video_enc_get_type ();
-  g_type_query (type, &type_query);
-  memset (&type_info, 0, sizeof (type_info));
-  type_info.class_size = type_query.class_size;
-  type_info.instance_size = type_query.instance_size;
-  type_info.class_init = gst_v4l2_video_enc_subclass_init;
-  type_info.class_data = cdata;
-  type_info.instance_init = gst_v4l2_video_enc_subinstance_init;
-
-  type_name = g_strdup_printf ("v4l2%senc", basename);
-  subtype = g_type_register_static (type, type_name, &type_info, 0);
-
-  gst_element_register (plugin, type_name, GST_RANK_PRIMARY + 1, subtype);
-
-  g_free (type_name);
-
-  return TRUE;
-}
diff --git a/sys/v4l2/gstv4l2videoenc.h b/sys/v4l2/gstv4l2videoenc.h
index e56a76a..6fb15ab 100644
--- a/sys/v4l2/gstv4l2videoenc.h
+++ b/sys/v4l2/gstv4l2videoenc.h
@@ -29,6 +29,7 @@
 
 #include <gstv4l2object.h>
 #include <gstv4l2bufferpool.h>
+#include "gstv4l2.h"
 
 GST_DEBUG_CATEGORY_EXTERN (v4l2videoenc_debug);
 
@@ -43,7 +44,6 @@ G_BEGIN_DECLS
   (G_TYPE_CHECK_INSTANCE_TYPE((obj),GST_TYPE_V4L2_VIDEO_ENC))
 #define GST_IS_V4L2_VIDEO_ENC_CLASS(obj) \
   (G_TYPE_CHECK_CLASS_TYPE((klass),GST_TYPE_V4L2_VIDEO_ENC))
-
 typedef struct _GstV4l2VideoEnc GstV4l2VideoEnc;
 typedef struct _GstV4l2VideoEncClass GstV4l2VideoEncClass;
 
@@ -72,6 +72,9 @@ struct _GstV4l2VideoEncClass
   GstVideoEncoderClass parent_class;
 
   gchar *default_device;
+
+    GstFlowReturn (*handle_frame) (GstVideoEncoder * encoder,
+      GstVideoCodecFrame * frame, GstCaps * outcaps);
 };
 
 GType gst_v4l2_video_enc_get_type (void);
-- 
2.5.0

